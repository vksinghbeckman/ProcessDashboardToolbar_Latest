// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using Refit;
using System.Text;
using System.Threading.Tasks;
using Process_DashboardToolBarTaskDetails;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Process_DashboardToolBar
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedIPDashAPI : IPDashAPI
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedIPDashAPI(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<TimerApiResponse> GetTimerState()
        {
            var arguments = new object[] {  };
            return (Task<TimerApiResponse>) methodImpls["GetTimerState"](Client, arguments);
        }

        public virtual Task<TimerApiResponse> ChangeTimerState(Dictionary<string, object> param)
        {
            var arguments = new object[] { param };
            return (Task<TimerApiResponse>) methodImpls["ChangeTimerState"](Client, arguments);
        }

        public virtual Task<ProjectDetailsApiResponse> GetProjectDetails(string projectId)
        {
            var arguments = new object[] { projectId };
            return (Task<ProjectDetailsApiResponse>) methodImpls["GetProjectDetails"](Client, arguments);
        }

        public virtual Task<ProejctsRootInfo> GetProjectDeatails()
        {
            var arguments = new object[] {  };
            return (Task<ProejctsRootInfo>) methodImpls["GetProjectDeatails"](Client, arguments);
        }

        public virtual Task<ProjectTaskDetails> GetProjectTaskDeatails(string projectId)
        {
            var arguments = new object[] { projectId };
            return (Task<ProjectTaskDetails>) methodImpls["GetProjectTaskDeatails"](Client, arguments);
        }

        public virtual Task<RootObject> ChangeTaskIdDetails(string taskId,Dictionary<string, object> param)
        {
            var arguments = new object[] { taskId,param };
            return (Task<RootObject>) methodImpls["ChangeTaskIdDetails"](Client, arguments);
        }

        public virtual Task<PDEventsApiResponse> GetEvents(int after)
        {
            var arguments = new object[] { after };
            return (Task<PDEventsApiResponse>) methodImpls["GetEvents"](Client, arguments);
        }

    }
}
